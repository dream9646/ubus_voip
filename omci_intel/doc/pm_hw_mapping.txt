
//generally speaking we only take care about the "not support" part.
//value in rtl8367 for ethernet_frame_pm is rx+tx, so in the class 321,322 
//we record it on upstream, and all downstream are 0

id: 24 name: Ethernet_PM section: 9.5.2

5vt2310:
ethernet_pm->fcs_error=fcs_err;
ethernet_pm->excessive_collision_counter=exess_collision;
ethernet_pm->late_collision_counter=late_collision;
ethernet_pm->frames_too_long=frame_too_long;
ethernet_pm->buffer_overflows_on_receive=buffer_ovrflow_recv;
ethernet_pm->buffer_overflows_on_transmit=0;	//not support in 2310
ethernet_pm->single_collision_frame_counter=single_collision;
ethernet_pm->multiple_collisions_frame_counter=multi_collision;
ethernet_pm->sqe_counter=0;     		//not support in 2310
ethernet_pm->deferred_transmission_counter=deferred_tx;
ethernet_pm->internal_mac_transmit_error_counter=internal_mac_error;
ethernet_pm->carrier_sense_error_counter=0;     //not support in 2310
ethernet_pm->alignment_error_counter=align_error;
ethernet_pm->internal_mac_receive_error_counter=internal_mac_recv_err;

rtl8367:
fcs_error;                         // rx        dot3StatsFCSErrors
excessive_collision_counter;       // tx        etherStatsCollisions
late_collision_counter;            // tx        dot3StatsLateCollisions
frames_too_long;                   // rx        SWITCH_NONE_SUPPORT
buffer_overflows_on_receive;       // rx        SWITCH_NONE_SUPPORT
buffer_overflows_on_transmit;      // tx        SWITCH_NONE_SUPPORT
single_collision_frame_counter;    // tx        dot3StatsSingleCollisionFrames
multiple_collisions_frame_counter; // tx        dot3StatsMultipleCollisionFrames
sqe_counter;                       // ?         SWITCH_NONE_SUPPORT
deferred_transmission_counter;     // tx        dot3StatsDeferredTransmissions
internal_mac_transmit_error_counter; //tx      	SWITCH_NONE_SUPPORT
carrier_sense_error_counter;       // tx        SWITCH_NONE_SUPPORT
alignment_error_counter;           // rx        SWITCH_NONE_SUPPORT
internal_mac_receive_error_counter; //rx        SWITCH_NONE_SUPPORT

//-----------------------------------------------------------------------
Workaround counters : From original counters
//use value in left side replace me field in right side.

TX_RX_FRAME_64: rxAlignErr

TX_RX_FRAME_65_TO_127: txDeferralPackets

TX_RX_FRAME_128_TO_255: txLateCollision

TX_RX_FRAME_256_TO_511: txMultipleCollision

TX_RX_FRAME_512_TO_1023: rxFifoFullDiscardPackets

TX_RX_FRAME_1024_TO_1518: txFifoFullDiscardPackets

RX_UCAST_PACKETS: intMacRxErrorCount

TX_UCAST_PACKETS: intMacTxErrorCount

receive_broadcast_Packet: txExcessiveCollision 


5vt2310 with ALU workaround:
ethernet_pm->fcs_error=fcs_err;
ethernet_pm->excessive_collision_counter=ethernet_frame_pm.broadcast_packets;
ethernet_pm->late_collision_counter=ethernet_frame_pm.packets_128_to_255_octets;
ethernet_pm->frames_too_long=frame_too_long;
ethernet_pm->buffer_overflows_on_receive=ethernet_frame_pm.packets_512_to_1023_octets;
ethernet_pm->buffer_overflows_on_transmit=ethernet_frame_pm.packets_1024_to_1518_octets;
ethernet_pm->single_collision_frame_counter=single_collision;
ethernet_pm->multiple_collisions_frame_counter=ethernet_frame_pm.packets_256_to_511_octets;
ethernet_pm->sqe_counter=0;             		//not support in 2310
ethernet_pm->deferred_transmission_counter=ethernet_frame_pm.packets_65_to_127_octets;
ethernet_pm->internal_mac_transmit_error_counter=0;     //not support in 2310(mapping to TX_UCAST_PACKETS)
ethernet_pm->carrier_sense_error_counter=0;		//not support in 2310
ethernet_pm->alignment_error_counter=ethernet_frame_pm.packets_64_octets;
ethernet_pm->internal_mac_receive_error_counter=0;      //not support in 2310(mapping to RX_UCAST_PACKETS)

rtl8367 with ALU workaround:
fcs_error;                         // rx  STAT_Dot3StatsFCSErrors;
excessive_collision_counter;       // tx  STAT_EtherStatsBroadcastPkts;
late_collision_counter;            // tx  STAT_EtherStatsPkts128to255Octets;
frames_too_long;                   // rx  SWITCH_NONE_SUPPORT;
buffer_overflows_on_receive;       // rx  STAT_EtherStatsPkts1024to1518Octets;
buffer_overflows_on_transmit;      // tx  STAT_EtherStatsPkts512to1023Octets;
single_collision_frame_counter;    // tx  STAT_Dot3StatsSingleCollisionFrames;
multiple_collisions_frame_counter; // tx  STAT_EtherStatsPkts256to511Octets;
sqe_counter;                       // ?   SWITCH_NONE_SUPPORT;
deferred_transmission_counter;     // tx  STAT_EtherStatsPkts65to127Octets;
internal_mac_transmit_error_counter; //tx	STAT_IfOutUcastPkts;
carrier_sense_error_counter;       // tx  SWITCH_NONE_SUPPORT;
alignment_error_counter;           // rx  STAT_EtherStatsPkts64Octets;
internal_mac_receive_error_counter; //rx  STAT_IfInUcastPkts;


//Class 296 ethernet_pm_data3 9.5.4

5vt2310:
drop_events=0;			//not support
octets=octets;
packets=packets;
broadcast_packets=broadCast;
multicast_packets=multicast;
crc_errored_packets=0;		//not support
undersize_packets=undersize;
fragments=fragments;         	//etherStatsFragments(not use in pm up/down stream, but in pm_data3)
jabbers=jabbers;             	//etherStatsOversizePkts(the same as oversize_packets in ethernet_pm_data3)
packets_64_octets=octet_64;
packets_65_to_127_octets=octet_65_127;
packets_128_to_255_octets=octet_128_255;
packets_256_to_511_octets=octet_256_511;
packets_512_to_1023_octets=octet_512_1023;
packets_1024_to_1518_octets=octet_1024_1518;

rtl8367:
drop_events;                    //      "etherStatsDropEvents",(number of packets in RTL8367)
octets;                         //      "etherStatsOctets",
packets;                        // not support because "ifInOctets" use bytes, and only care valid frames
broadcast_packets;              //      "etherStatsBcastPkts",
multicast_packets;              //      "etherStatsMcastPkts",
crc_errored_packets;            // not support (not use in ethernet_pm_data3, but in pm up/down stream)
undersize_packets;              //      "etherStatsUndersizePkts",
fragments;                      //      "etherStatsFragments" (not use in pm up/down stream, but in pm_data3)
jabbers;                        //      "etherStatsOversizePkts",(the same as oversize_packets in ethernet_pm_data3)
packets_64_octets;              //      "etherStatsPkts64Octets",
packets_65_to_127_octets;       //      "etherStatsPkts65to127Octets",
packets_128_to_255_octets;      //      "etherStatsPkts128to255Octets",
packets_256_to_511_octets;      //      "etherStatsPkts256to511Octets",
packets_512_to_1023_octets;     //      "etherStatsPkts512to1023Octets",
packets_1024_to_1518_octets;    //      "etherStatsPkts1024toMaxOctets",

