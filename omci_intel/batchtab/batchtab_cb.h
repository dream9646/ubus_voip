/******************************************************************
 *
 * Copyright (C) 2011 5V Technologies Ltd.
 * All Rights Reserved.
 *
 * This program is the proprietary software of 5V Technologies Ltd
 * and/or its licensors, and only be used, duplicated,
 * modified or distributed under the authorized license from 5VT.
 *
 * ANY USE OF THE SOFTWARE OTHER THAN AS AUTHORIZED UNDER
 * THIS LICENSE OR COPYRIGHT LAW IS PROHIBITED.
 *
 * Purpose : 5VT OMCI protocol stack
 * Module  : batchtab
 * File    : batchtab_cb.h
 *
 ******************************************************************/

#ifndef __BATCHTAB_CB_H__
#define __BATCHTAB_CB_H__

#include <arpa/inet.h>

#include "meinfo.h"
#include "metacfg_adapter.h"
#include "gpon_sw.h"
#include "switch.h"
#include "wanif.h"

// batchtab_cb_filtering.c ////////////////////////////////////////////
struct batchtab_cb_filtering_bport_t {
	unsigned short bport_meid;
	unsigned char entry_num;
	unsigned char op_mode;
	unsigned char pri[12];
	unsigned char cfi[12];
	unsigned short vid[12];
};

struct batchtab_cb_filtering_t {
	struct batchtab_cb_filtering_bport_t filtering_bport[64];
	int total;
};

// batchtab_cb_hardbridge.c ////////////////////////////////////////////
struct batchtab_cb_hardbridge_t {
	unsigned char maclimit_enable;
	unsigned char has_veip_service;
	unsigned char hardbridge_enable;
	unsigned char hardbridge_enable_old;
};

// batchtab_cb_tagging.c ////////////////////////////////////////////
struct batchtab_cb_tagging_bport_t {
	unsigned short bport_meid;
	struct list_head rule_list_us;
	struct list_head rule_list_ds;
};

struct batchtab_cb_tagging_t {
	struct batchtab_cb_tagging_bport_t tagging_bport[64];
	int total;
};

// batchtab_cb_wand2p.c ////////////////////////////////////////////
struct batchtab_cb_wand2p_port_t
{
	unsigned char enable; //0: disable, 1: enable
	unsigned short vid; //vlan id
	unsigned char dscp2pbit_enable; //0: disable, 1: enable
};

struct batchtab_cb_wand2p_t
{
	struct batchtab_cb_wand2p_port_t wand2p[WANIF_INDEX_TOTAL];
	struct fwk_mutex_t mutex;
};

// batchtab_cb_wan.c ////////////////////////////////////////////
struct batchtab_cb_wan_node_t {
	unsigned short bport_meid;
	unsigned char pbit;
	unsigned stream_id;
	struct list_head node;
};

struct batchtab_cb_wan_t {
	struct list_head wan_list[8];
	struct fwk_mutex_t mutex;	
};

// batchtab_cb_wanif.c ////////////////////////////////////////////
#define WANIF_FEATURE_IPHOST_ADD		(1<<0)
#define WANIF_FEATURE_IPHOST_DEL		(1<<1)
#define WANIF_FEATURE_TR069_ADD			(1<<2)
#define WANIF_FEATURE_TR069_DEL			(1<<3)
#define WANIF_FEATURE_RGVLAN_ADD		(1<<4)
#define WANIF_FEATURE_RGVLAN_DEL		(1<<5)
#define WANIF_FEATURE_BRWAN_ADD			(1<<6)
#define WANIF_FEATURE_BRWAN_DEL			(1<<7)
#define WANIF_FEATURE_AUTO_IGMP_ENABLE		(1<<8)
#define WANIF_FEATURE_RGVLAN_IGNORE_UNTAG	(1<<9)
#define WANIF_FEATURE_RGVLAN_DEL_NONAUTO	(1<<10)
#define WANIF_FEATURE_TR069_IS_IPHOST		(1<<11)
#define WANIF_FEATURE_RGVLAN_IP_ASSIGN		(1<<12)

#define IPHOST_TOTAL		8
#define VEIP_TOTAL		4
#define TR069_TOTAL		4
#define CALIX_RG_CONFIG_TOTAL	4
#define RG2ANI_TAGLIST_TOTAL	16
#define US_TCILIST_TOTAL	16

struct batchtab_cb_wanif_t {
	// state changed since reboot/last mibreset
	unsigned long mib_reset_timestamp_prev;
	unsigned char wanif_configured_after_mibreset[WANIF_INDEX_TOTAL];
	unsigned char me309_me310_is_updated;
	int omci_wanif_vid[32];	// keep vid of wanif created by omci
	// me attr changed since reboot/last_mibreset
	unsigned char change_mask_me134[IPHOST_TOTAL][2];		// iphost
	unsigned char change_mask_me329[VEIP_TOTAL][2];			// veip	
	unsigned char change_mask_me340[TR069_TOTAL][2];		// tr069
	unsigned char change_mask_me65317[CALIX_RG_CONFIG_TOTAL][2];	// calix rg_config
	// previous calix mgmt mode
	int mgmt_mode_prev;
	// iphost rg/ani vlan translation
	int iphost_rg_tag_total;
	unsigned short iphost_rg_tag_list[RG2ANI_TAGLIST_TOTAL];	// vtagging rule collected from veip related me 171
	unsigned short iphost_ani_tag_list[RG2ANI_TAGLIST_TOTAL];
	unsigned short iphost_rg_tag_meid[RG2ANI_TAGLIST_TOTAL];	// specify veip meid of per rg tag rule
	// veip rg/ani vlan translation
	int veip_rg_tag_total;
	unsigned short veip_rg_tag_list[RG2ANI_TAGLIST_TOTAL];	// vtagging rule collected from veip related me 171
	unsigned short veip_ani_tag_list[RG2ANI_TAGLIST_TOTAL];
	unsigned short veip_rg_tag_meid[RG2ANI_TAGLIST_TOTAL];	// specify veip meid of per rg tag rule
	// igmp us_tci, us_tag_control
	int us_tci_total;
	unsigned short us_tci_list[US_TCILIST_TOTAL];		// tci for upstream igmp pkt
	unsigned char us_tag_control_list[US_TCILIST_TOTAL];	// tag control for upstream igmp
	unsigned short us_tci_veip_meid[US_TCILIST_TOTAL];	// specify veip meid of per us tci & tag control
#ifdef OMCI_METAFILE_ENABLE
	// kv config change
	struct metacfg_t submit_kv_diff;			// kv_config generated by last submit
#endif
	char submit_kv_filename[128];				// kv_config filename of submit kv_diff
	long submit_time; 					// update time in sec
};

// batchtab_cb_isolation.c ////////////////////////////////////////////

#define BRIDGE_NUM_MAX	8
#define BRIDGE_PORT_MAX	32
#define BRWAN_TOTAL	8

struct collect_bridge_t {
	unsigned char is_used;
	unsigned char local_bridge_enable;
	unsigned short bridge_meid;
	unsigned int portmask;
	unsigned char port_total;
	unsigned char port_id[BRIDGE_PORT_MAX];	// logical_portid
	unsigned short port_meid[BRIDGE_PORT_MAX];	// bport(47)
	unsigned short tp_classid[BRIDGE_PORT_MAX];
	unsigned short tp_meid[BRIDGE_PORT_MAX];	// pptp-uni(11), iphost(134), veip(329)
};

struct batchtab_cb_isolation_set_t {
	struct collect_bridge_t collect_bridge[BRIDGE_NUM_MAX]; 
	unsigned int null_bridge_portmask;
	unsigned char null_bridge_port_total;
	unsigned char null_bridge_port_id[BRIDGE_PORT_MAX];
	unsigned short null_bridge_pptp_meid[BRIDGE_PORT_MAX];
	unsigned short null_bridge_unig_meid[BRIDGE_PORT_MAX];
	unsigned int router_mode_uni_portmask;
	unsigned int bridge_mode_uni_portmask;
	unsigned int brwan_uni_portmask;
};

// batchtab_cb_mac_filter.c ////////////////////////////////////////////

#define VACL_NUM_MAX	64
struct collect_mac_filter_t {
	unsigned char is_used;
	int hw_rule_entry;
	unsigned int port_id;
	unsigned char dir;
	unsigned char mac_addr[6];
};

struct batchtab_cb_mac_filter_t {
	struct collect_mac_filter_t collect_mac_filter[VACL_NUM_MAX]; 
};

// batchtab_cb_linkready.c ////////////////////////////////////////////

struct batchtab_cb_linkready_flowinfo_t {
	struct gpon_tm_usflow_config_t usflow_config;
	int pq_id;
	int tcont_id;
};

struct batchtab_cb_linkready_t {	// connect --(debounce 2s)--> ready ----> disconnect --(deboune 12s)--> down
	// timestamp: second in sys uptime
	long uplink_connect_time;	// data gem establish
	long uplink_ready_time;		// debounced connect, linkready 0->1
	long uplink_disconnect_time;	// data gem unavailable
	long uplink_down_time;		// debounced disconnect, linkready 1->0

	unsigned char uplink_connect_post_event_sent;

	// prev status
	unsigned char prev_onuid;
	unsigned short prev_data_gem_total;
	unsigned char prev_uplink_is_ready;
	// current status
	unsigned char onuid;
	unsigned short data_gem_total;
	unsigned char uplink_is_ready;
	
	short allocid[GPON_TCONT_ID_TOTAL];	// tcont->allocid
	struct batchtab_cb_linkready_flowinfo_t flowinfo[GPON_FLOW_ID_TOTAL];
};

// batchtab_cb_autouni.c ////////////////////////////////////////////
struct autouni_info_t {
	unsigned short bridge_meid;
	unsigned short bport_meid[16];
	int is_attached;
};

// batchtab_cb_autoveip.c ////////////////////////////////////////////
struct autoveip_info_t {
	unsigned short bridge_meid;
	unsigned short bport_meid[16];
	int is_attached;
};

// batchtab_cb_mcastmode.c ////////////////////////////////////////////
#define MCASTMODE_MCASTGEM_MAX		16
#define MCASTMODE_SUBSCRIBER_MAX	16

struct mcastmode_info_t {
	// current state
	unsigned char datagem_total;
	unsigned char mcastgem_total;
	unsigned short mcastgem_list[MCASTMODE_MCASTGEM_MAX];
	unsigned char mcastflowid_list[MCASTMODE_MCASTGEM_MAX];
	unsigned char mcast_mode; //0: pass mode, iptv disable, 1: drop mode, iptv enable
	// prev state, used by hw_sync to eliminate unneceesay call to switch.sh (which is slow under heavy loading)
	unsigned char datagem_total_prev;
	unsigned char mcastgem_total_prev;
	unsigned short mcastgem_list_prev[MCASTMODE_MCASTGEM_MAX];
	unsigned char mcastflowid_list_prev[MCASTMODE_MCASTGEM_MAX];
	unsigned char mcast_mode_prev;
	// collect mcast_subscriber_config_info related to termination point (veip|pptpuni|iphost...)
	unsigned short subscriber_meid[MCASTMODE_SUBSCRIBER_MAX];
	unsigned short bport_meid[MCASTMODE_SUBSCRIBER_MAX];
	unsigned short tp_classid[MCASTMODE_SUBSCRIBER_MAX];
	unsigned short tp_meid[MCASTMODE_SUBSCRIBER_MAX];
	struct switch_mc_profile_ext_vlan_update_data mc_profile_ext_vlan[MCASTMODE_MCASTGEM_MAX];
	unsigned short mc_ext_vlan_cnt;
};

// batchtab_cb_pots_mkey.c ////////////////////////////////////////////
#define BATCHTAB_POTS_MKEY_INIT 1
#define BATCHTAB_POTS_MKEY_GEN_TODO 22
#define BATCHTAB_POTS_MKEY_GEN_DONE 33
#define BATCHTAB_POTS_MKEY_HW_SYNC_TODO 44
#define BATCHTAB_POTS_MKEY_HW_SYNC_DONE 55
#define BATCHTAB_POTS_MKEY_FINISH 6
#define BATCHTAB_POTS_MKEY_RELEASE 7

// functions ///////////////////////////////////////////////////////////////////

/* batchtab_cb.c */
void batchtab_cb_tm_protect_start(void);
void batchtab_cb_tm_protect_stop(void);
int batchtab_cb_init(void);
int batchtab_cb_finish(void);

/* batchtab_cb_autouni.c */
unsigned int autouni_is_required(unsigned short *single_bridge_meid);
int batchtab_cb_autouni_register(void);
int batchtab_cb_autouni_detach(void);
/* batchtab_cb_autoveip.c */
unsigned int autoveip_is_required(unsigned short *single_bridge_meid);
int batchtab_cb_autoveip_register(void);
int batchtab_cb_autoveip_detach(void);
/* batchtab_cb_classf.c */
int batchtab_cb_classf_register(void);
/* batchtab_cb_filtering.c */
int batchtab_cb_filtering_register(void);
/* batchtab_cb_gemflow.c */
int batchtab_cb_gemflow_register(void);
/* batchtab_cb_isolation.c */
unsigned int batchtab_cb_isolation_get_router_mode_uni_portmask(void);
int batchtab_cb_isolation_set_register(void);
/* batchtab_cb_linkready.c */
int batchtab_cb_linkready_check_debounce(void);
int batchtab_cb_linkready_state(void);
int batchtab_cb_linkready_register(void);
/* batchtab_cb_mac_filter.c */
int batchtab_cb_mac_filter_register(void);
/* batchtab_cb_mcastbw.c */
int batchtab_cb_mcastbw_register(void);
/* batchtab_cb_mcastmode.c */
int batchtab_cb_mcastmode_register(void);
/* batchtab_cb_mcastconf.c */
int batchtab_cb_mcastconf_register(void);
/* batchtab_cb_tagging.c */
int batchtab_cb_tagging_is_ready();
int batchtab_cb_tagging_register(void);
/* batchtab_cb_td.c */
int batchtab_cb_td_register(void);
/* batchtab_cb_tm.c */
int batchtab_cb_tm_register(void);
/* batchtab_cb_tr069.c */
int batchtab_cb_tr069_register(void);
/* batchtab_cb_wan.c */
int batchtab_cb_wan_register(void);
/* batchtab_cb_wanif.c */
int batchtab_cb_wanif_save_mgmt_mode_to_storage(int mgmt_mode);
int batchtab_cb_wanif_load_mgmt_mode_from_storage(void);
int batchtab_cb_wanif_get_calix_mgmt_mode(struct me_t **me65317_found);
int batchtab_cb_wanif_me_update(struct me_t *me, unsigned char change_mask[2]);
int batchtab_cb_wanif_me137_create(void);
int batchtab_cb_wanif_me137_delete(void);
int batchtab_cb_wanif_register(void);
/* batchtab_cb_wand2p.c */
int batchtab_cb_wand2p_register(void);
/* batchtab_cb_pots.c */
int batchtab_cb_pots_register(void);
int batchtab_cb_pots_is_hw_sync(void);

/* batchtab_cb_lldp.c */
int batchtab_cb_lldp_register(void);
/* batchtab_cb_hardbridge.c */
int batchtab_cb_hardbridge_register(void);

#endif
