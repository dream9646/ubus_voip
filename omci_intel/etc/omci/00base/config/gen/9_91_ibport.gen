#!/bin/sh
# tiny: tcont 4, small: tcont 8, large: tcont 16
# we assume 8 ts for per tcont no matter how many tcont is actually used by the tcont

if [ -z "$1" ]; then
	echo "$0 [tiny|small|large]"
	exit 1
fi

case $1 in
	tiny)
		UNI_TOTAL=5
		WLAN_TOTAL=1
		VEIP_TOTAL=1
		IPHOST_TOTAL=1
		DS_BCAST_TOTAL=2
		WAN_TOTAL=16;;	
	small)
		UNI_TOTAL=5
		WLAN_TOTAL=2
		VEIP_TOTAL=2
		IPHOST_TOTAL=2
		DS_BCAST_TOTAL=2
		WAN_TOTAL=64;;	
	large)
		UNI_TOTAL=5
		WLAN_TOTAL=2
		VEIP_TOTAL=2
		IPHOST_TOTAL=8
		DS_BCAST_TOTAL=6
		WAN_TOTAL=64;;

	*)	echo "$0 [tiny|small|large]"
		exit 1;;
esac


# ibport is used internally and allocated when olt want to create bport ##################################
# so the number of specific type ibport should >= possible bport created by olt
# or olt wont be able to create the bport

instance=0

# 5 uni
index=0
while [ $index -lt $UNI_TOTAL ]; do
cat <<EOF
	<instance i="$instance">
		<devname>uni$index</devname>
		<default_meid>0xffff</default_meid>
		<pm_is_accumulated_mask>0xffff</pm_is_accumulated_mask>
		<is_private>0</is_private>
		<attr i="1">0</attr>	<!-- Occupied -->
		<attr i="2">0xffff</attr>	<!-- Associated_pointer -->
		<attr i="3">0xffff</attr>	<!-- Default_associated_pointer -->
		<attr i="4">1</attr>	<!-- Bridge_port_type 0:cpu, 1:uni, 2:wan, 3:iphost, 4:ds_bcast, 5:unused -->
		<attr i="5">$index</attr>	<!-- Bridge_port_type_index -->
		<attr i="6">$index</attr>	<!-- Logical_port_id 0..4:uni, 5:wan, 6:cpu, 7:wlan0, 8:wlan1 -->
	</instance>
EOF
	index=$(($index+1))
	instance=$(($instance+1))
done

# 2 wlan
wlan_index=0
while [ $wlan_index -lt $WLAN_TOTAL ]; do
cat <<EOF
	<instance i="$instance">
		<devname>wlan$wlan_index</devname>
		<default_meid>0xffff</default_meid>
		<pm_is_accumulated_mask>0xffff</pm_is_accumulated_mask>
		<is_private>0</is_private>
		<attr i="1">0</attr>	<!-- Occupied -->
		<attr i="2">0xffff</attr>	<!-- Associated_pointer -->
		<attr i="3">0xffff</attr>	<!-- Default_associated_pointer -->
		<attr i="4">1</attr>	<!-- Bridge_port_type 0:cpu, 1:uni, 2:wan, 3:iphost, 4:ds_bcast, 5:unused -->
		<attr i="5">$index</attr>	<!-- Bridge_port_type_index -->
		<attr i="6">$((7+$wlan_index))</attr>	<!-- Logical_port_id 0..4:uni, 5:wan, 6:cpu, 7:wlan0, 8:wlan1 -->
	</instance>
EOF
	index=$(($index+1))
	wlan_index=$(($wlan_index+1))
	instance=$(($instance+1))
done

# 5 autouni
index=0
while [ $index -lt $UNI_TOTAL ]; do
cat <<EOF
	<instance i="$instance">
		<devname>autouni$index</devname>
		<default_meid>0xffff</default_meid>
		<pm_is_accumulated_mask>0xffff</pm_is_accumulated_mask>
		<is_private>0</is_private>
		<attr i="1">0</attr>	<!-- Occupied -->
		<attr i="2">0xffff</attr>	<!-- Associated_pointer -->
		<attr i="3">0xffff</attr>	<!-- Default_associated_pointer -->
		<attr i="4">1</attr>	<!-- Bridge_port_type 0:cpu, 1:uni, 2:wan, 3:iphost, 4:ds_bcast, 5:unused -->
		<attr i="5">$index</attr>	<!-- Bridge_port_type_index -->
		<attr i="6">$index</attr>	<!-- Logical_port_id 0..4:uni, 5:wan, 6:cpu, 7:wlan0, 8:wlan1 -->
	</instance>
EOF
	index=$(($index+1))
	instance=$(($instance+1))
done

# 2 autouni_wlan
wlan_index=0
while [ $wlan_index -lt $WLAN_TOTAL ]; do
cat <<EOF
	<instance i="$instance">
		<devname>autouni_wlan$wlan_index</devname>
		<default_meid>0xffff</default_meid>
		<pm_is_accumulated_mask>0xffff</pm_is_accumulated_mask>
		<is_private>0</is_private>
		<attr i="1">0</attr>	<!-- Occupied -->
		<attr i="2">0xffff</attr>	<!-- Associated_pointer -->
		<attr i="3">0xffff</attr>	<!-- Default_associated_pointer -->
		<attr i="4">1</attr>	<!-- Bridge_port_type 0:cpu, 1:uni, 2:wan, 3:iphost, 4:ds_bcast, 5:unused -->
		<attr i="5">$index</attr>	<!-- Bridge_port_type_index -->
		<attr i="6">$((7+$wlan_index))</attr>	<!-- Logical_port_id 0..4:uni, 5:wan, 6:cpu, 7:wlan0, 8:wlan1 -->
	</instance>
EOF
	index=$(($index+1))
	wlan_index=$(($wlan_index+1))
	instance=$(($instance+1))
done

# 2 veip
index=0
while [ $index -lt $VEIP_TOTAL ]; do
cat <<EOF
	<instance i="$instance">
		<devname>veip$index</devname>
		<default_meid>0xffff</default_meid>
		<pm_is_accumulated_mask>0xffff</pm_is_accumulated_mask>
		<is_private>0</is_private>
		<attr i="1">0</attr>	<!-- Occupied -->
		<attr i="2">0xffff</attr>	<!-- Associated_pointer -->
		<attr i="3">0xffff</attr>	<!-- Default_associated_pointer -->
		<attr i="4">0</attr>	<!-- Bridge_port_type 0:cpu, 1:uni, 2:wan, 3:iphost, 4:ds_bcast, 5:unused -->
		<attr i="5">$index</attr>	<!-- Bridge_port_type_index -->
		<attr i="6">6</attr>	<!-- Logical_port_id 0..4:uni, 5:wan, 6:cpu, 7:wlan0, 8:wlan1 -->
	</instance>
EOF
	index=$(($index+1))
	instance=$(($instance+1))
done

# 2 autoveip
index=0
while [ $index -lt $VEIP_TOTAL ]; do
cat <<EOF
	<instance i="$instance">
		<devname>autoveip$index</devname>
		<default_meid>0xffff</default_meid>
		<pm_is_accumulated_mask>0xffff</pm_is_accumulated_mask>
		<is_private>0</is_private>
		<attr i="1">0</attr>	<!-- Occupied -->
		<attr i="2">0xffff</attr>	<!-- Associated_pointer -->
		<attr i="3">0xffff</attr>	<!-- Default_associated_pointer -->
		<attr i="4">0</attr>	<!-- Bridge_port_type 0:cpu, 1:uni, 2:wan, 3:iphost, 4:ds_bcast, 5:unused -->
		<attr i="5">$index</attr>	<!-- Bridge_port_type_index -->
		<attr i="6">6</attr>	<!-- Logical_port_id 0..4:uni, 5:wan, 6:cpu, 7:wlan0, 8:wlan1 -->
	</instance>
EOF
	index=$(($index+1))
	instance=$(($instance+1))
done

# 2 iphost
index=0
while [ $index -lt $IPHOST_TOTAL ]; do
cat <<EOF
	<instance i="$instance">
		<devname>iphost$index</devname>
		<default_meid>0xffff</default_meid>
		<pm_is_accumulated_mask>0xffff</pm_is_accumulated_mask>
		<is_private>0</is_private>
		<attr i="1">0</attr>	<!-- Occupied -->
		<attr i="2">0xffff</attr>	<!-- Associated_pointer -->
		<attr i="3">0xffff</attr>	<!-- Default_associated_pointer -->
		<attr i="4">3</attr>	<!-- Bridge_port_type 0:cpu, 1:uni, 2:wan, 3:iphost, 4:ds_bcast, 5:unused -->
		<attr i="5">$index</attr>	<!-- Bridge_port_type_index -->
		<attr i="6">6</attr>	<!-- Logical_port_id 0..4:uni, 5:wan, 6:cpu, 7:wlan0, 8:wlan1 -->
	</instance>
EOF
	index=$(($index+1))
	instance=$(($instance+1))
done

# 6 ds_bcast
index=0
while [ $index -lt $DS_BCAST_TOTAL ]; do
cat <<EOF
	<instance i="$instance">
		<devname>ds_bcast$index</devname>
		<default_meid>0xffff</default_meid>
		<pm_is_accumulated_mask>0xffff</pm_is_accumulated_mask>
		<is_private>0</is_private>
		<attr i="1">0</attr>	<!-- Occupied -->
		<attr i="2">0xffff</attr>	<!-- Associated_pointer -->
		<attr i="3">0xffff</attr>	<!-- Default_associated_pointer -->
		<attr i="4">4</attr>	<!-- Bridge_port_type 0:cpu, 1:uni, 2:wan, 3:iphost, 4:ds_bcast, 5:unused -->
		<attr i="5">$index</attr>	<!-- Bridge_port_type_index -->
		<attr i="6">6</attr>	<!-- Logical_port_id 0..4:uni, 5:wan, 6:cpu, 7:wlan0, 8:wlan1 -->
	</instance>
EOF
	index=$(($index+1))
	instance=$(($instance+1))
done

# 64 wan (the same total as gem/pq)
index=0
while [ $index -lt $WAN_TOTAL ]; do
cat <<EOF
	<instance i="$instance">
		<devname>wan$index</devname>
		<default_meid>0xffff</default_meid>
		<pm_is_accumulated_mask>0xffff</pm_is_accumulated_mask>
		<is_private>0</is_private>
		<attr i="1">0</attr>	<!-- Occupied -->
		<attr i="2">0xffff</attr>	<!-- Associated_pointer -->
		<attr i="3">0xffff</attr>	<!-- Default_associated_pointer -->
		<attr i="4">2</attr>	<!-- Bridge_port_type 0:cpu, 1:uni, 2:wan, 3:iphost, 4:ds_bcast, 5:unused -->
		<attr i="5">$index</attr>	<!-- Bridge_port_type_index -->
		<attr i="6">5</attr>	<!-- Logical_port_id 0..4:uni, 5:wan, 6:cpu, 7:wlan0, 8:wlan1 -->
	</instance>
EOF
	index=$(($index+1))
	instance=$(($instance+1))
done

# default template for wan 
cat <<EOF
	<instance i="0xffff">
		<devname>wan${WAN_TOTAL}...</devname>
		<default_meid>0xffff</default_meid>
		<pm_is_accumulated_mask>0xffff</pm_is_accumulated_mask>
		<is_private>0</is_private>
		<attr i="1">0</attr>	<!-- Occupied -->
		<attr i="2">0xffff</attr>	<!-- Associated_pointer -->
		<attr i="3">0xffff</attr>	<!-- Default_associated_pointer -->
		<attr i="4">2</attr>	<!-- Bridge_port_type 0:cpu, 1:uni, 2:wan, 3:iphost, 4:ds_bcast, 5:unused -->
		<attr i="5">${WAN_TOTAL}</attr>	<!-- Bridge_port_type_index -->
		<attr i="6">5</attr>	<!-- Logical_port_id 0..4:uni, 5:wan, 6:cpu, 7:wlan0, 8:wlan1 -->
	</instance>
EOF
